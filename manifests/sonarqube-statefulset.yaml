apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: archilab
  name: sonarqube
  labels:
    app: sonarqube
spec:
  selector:
    matchLabels:
      app: sonarqube
  serviceName: sonarqube
  replicas: 1
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      securityContext:
        fsGroup: 999
      initContainers:
        - name: init-sysctl
          image: busybox:1.31.1
          command:
            [
              "sh",
              "-c",
              "sysctl -w vm.max_map_count=262144 && sysctl -w fs.file-max=65536
              && ulimit -n 65536 && ulimit -u 2048",
            ]
          securityContext:
            privileged: true
        # - name: chmod
        #   image: busybox:1.31.1
        #   command:
        #     [
        #       "sh",
        #       "-c",
        #       "mkdir -p /opt/sonarqube/conf && mkdir -p /opt/sonarqube/data &&
        #       mkdir -p /opt/sonarqube/logs && mkdir -p /opt/sonarqube/extensions
        #       && chown -R 999:999 /opt/sonarqube && chmod 755 /opt/sonarqube",
        #     ]
        #   securityContext:
        #     privileged: true
        - name: check-db-ready
          image: postgres:10.11-alpine
          command: ["sh"]
          args:
            [
              "-c",
              "until pg_isready -h sonarqube-postgres.archilab.svc.cluster.local
              -p 5432; do echo waiting for database; sleep 2; done;",
            ]
      containers:
        - name: sonarqube
          image: sonarqube:7.9.2-community
          envFrom:
            - configMapRef:
                name: sonarqube
          ports:
            - containerPort: 9000
          livenessProbe:
            httpGet:
              path: /sessions/new
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /sessions/new
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 30
            failureThreshold: 6
          # volumeMounts:
          #   - name: conf
          #     mountPath: "/opt/sonarqube/conf"
          #   - name: data
          #     mountPath: "/opt/sonarqube/data"
          #   - name: logs
          #     mountPath: "/opt/sonarqube/logs"
          #   - name: extensions
          #     mountPath: "/opt/sonarqube/extensions"
      # volumes:
      #   - name: conf
      #     persistentVolumeClaim:
      #       claimName: conf
      #   - name: data
      #     persistentVolumeClaim:
      #       claimName: data
      #   - name: logs
      #     persistentVolumeClaim:
      #       claimName: logs
      #   - name: extensions
      #     persistentVolumeClaim:
      #       claimName: extensions
  # volumeClaimTemplates:
  #   - metadata:
  #       name: conf
  #       labels:
  #         app: sonarqube
  #     spec:
  #       accessModes:
  #         - ReadWriteOnce
  #       resources:
  #         requests:
  #           storage: 10M
  #   - metadata:
  #       name: data
  #       labels:
  #         app: sonarqube
  #     spec:
  #       accessModes:
  #         - ReadWriteOnce
  #       resources:
  #         requests:
  #           storage: 250M
  #   - metadata:
  #       name: logs
  #       labels:
  #         app: sonarqube
  #     spec:
  #       accessModes:
  #         - ReadWriteOnce
  #       resources:
  #         requests:
  #           storage: 10M
  #   - metadata:
  #       name: extensions
  #       labels:
  #         app: sonarqube
  #     spec:
  #       accessModes:
  #         - ReadWriteOnce
  #       resources:
  #         requests:
  #           storage: 10G
